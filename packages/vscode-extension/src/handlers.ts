// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

"use strict";

import {
  commands,
  debug,
  env,
  ExtensionContext,
  QuickPickItem,
  Uri,
  window,
  workspace,
} from "vscode";
import {
  AppPackageFolderName,
  AppStudioTokenProvider,
  assembleError,
  AzureSolutionSettings,
  BuildFolderName,
  ConcurrentError,
  AutoGeneratedReadme,
  ConfigFolderName,
  CoreCallbackEvent,
  EnvConfigFileNameTemplate,
  EnvNamePlaceholder,
  EnvStateFileNameTemplate,
  err,
  Func,
  FxError,
  InputConfigsFolderName,
  Inputs,
  ok,
  Platform,
  Result,
  returnSystemError,
  returnUserError,
  SelectFileConfig,
  SelectFolderConfig,
  SharepointTokenProvider,
  SingleSelectConfig,
  Stage,
  StatesFolderName,
  SubscriptionInfo,
  SystemError,
  TemplateFolderName,
  Tools,
  UserError,
  Void,
  VsCodeEnv,
} from "@microsoft/teamsfx-api";
import {
  CollaborationState,
  Correlator,
  DepsType,
  environmentManager,
  FolderName,
  FxCore,
  getAppDirectory,
  getHashedEnv,
  globalStateGet,
  globalStateUpdate,
  InvalidProjectError,
  isConfigUnifyEnabled,
  isMigrateFromV1Project,
  isUserCancelError,
  isValidProject,
  LocalEnvManager,
  ProjectSettingsHelper,
} from "@microsoft/teamsfx-core";
import * as vscode from "vscode";
import GraphManagerInstance from "./commonlib/graphLogin";
import AzureAccountManager from "./commonlib/azureLogin";
import AppStudioTokenInstance from "./commonlib/appStudioLogin";
import SharepointTokenInstance from "./commonlib/sharepointLogin";
import AppStudioCodeSpaceTokenInstance from "./commonlib/appStudioCodeSpaceLogin";
import VsCodeLogInstance from "./commonlib/log";
import { CommandsTreeViewProvider, TreeViewCommand } from "./treeview/commandsTreeViewProvider";
import TreeViewManagerInstance from "./treeview/treeViewManager";
import { ExtTelemetry } from "./telemetry/extTelemetry";
import {
  AccountType,
  TelemetryEvent,
  TelemetryProperty,
  TelemetrySuccess,
  TelemetryTiggerFrom,
  TelemetryUpdateAppReason,
} from "./telemetry/extTelemetryEvents";
import * as commonUtils from "./debug/commonUtils";
import { ExtensionErrors, ExtensionSource } from "./error";
import { WebviewPanel } from "./controls/webviewPanel";
import * as constants from "./debug/constants";
import {
  anonymizeFilePaths,
  getM365TenantFromEnv,
  getProvisionSucceedFromEnv,
  getResourceGroupNameFromEnv,
  getSubscriptionInfoFromEnv,
  getTeamsAppIdByEnv,
  isSPFxProject,
} from "./utils/commonUtils";
import * as fs from "fs-extra";
import { VSCodeDepsChecker } from "./debug/depsChecker/vscodeChecker";
import { vscodeHelper } from "./debug/depsChecker/vscodeHelper";
import { vscodeLogger } from "./debug/depsChecker/vscodeLogger";
import { vscodeTelemetry } from "./debug/depsChecker/vscodeTelemetry";
import { installBackendExtension } from "./debug/depsChecker/backendExtensionsInstall";
import * as util from "util";
import * as StringResources from "./resources/Strings.json";
import { PanelType } from "./controls/PanelType";
import { signedIn, signedOut } from "./commonlib/common/constant";
import * as localPrerequisites from "./debug/prerequisitesHandler";
import { terminateAllRunningTeamsfxTasks } from "./debug/teamsfxTaskHandler";
import { VS_CODE_UI } from "./extension";
import { registerAccountTreeHandler } from "./accountTree";
import * as envTree from "./envTree";
import { selectAndDebug } from "./debug/runIconHandler";
import * as path from "path";
import { exp } from "./exp/index";
import { TreatmentVariables, TreatmentVariableValue } from "./exp/treatmentVariables";
import { StringContext } from "./utils/stringContext";
import { CommandsWebviewProvider } from "./treeview/commandsWebviewProvider";
import graphLogin from "./commonlib/graphLogin";
import { AzureAssignRoleHelpUrl, AzurePortalUrl, SpfxManageSiteAdminUrl } from "./constants";
import { TeamsAppMigrationHandler } from "./migration/migrationHandler";
import { generateAccountHint } from "./debug/teamsfxDebugProvider";
import { ext } from "./extensionVariables";
import * as uuid from "uuid";
import { automaticNpmInstallHandler } from "./debug/npmInstallHandler";

export let core: FxCore;
export let tools: Tools;
export function getWorkspacePath(): string | undefined {
  const workspacePath: string | undefined = workspace.workspaceFolders?.length
    ? workspace.workspaceFolders[0].uri.fsPath
    : undefined;
  return workspacePath;
}

export async function activate(): Promise<Result<Void, FxError>> {
  const result: Result<Void, FxError> = ok(Void);
  try {
    const workspacePath = getWorkspacePath();
    const validProject = isValidProject(workspacePath);
    if (validProject) {
      ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenTeamsApp, {});
    }

    if (!validProject) {
      vscode.commands.executeCommand("setContext", "fx-extension.sidebarWelcome.default", true);
    } else {
      vscode.commands.executeCommand("setContext", "fx-extension.sidebarWelcome.treeview", true);
    }

    const telemetry = ExtTelemetry.reporter;
    AzureAccountManager.setStatusChangeMap(
      "successfully-sign-in-azure",
      (status, token, accountInfo) => {
        if (status === signedIn) {
          window.showInformationMessage(StringResources.vsc.handlers.azureSignIn);
        } else if (status === signedOut) {
          window.showInformationMessage(StringResources.vsc.handlers.azureSignOut);
        }
        return Promise.resolve();
      },
      false
    );
    let appstudioLogin: AppStudioTokenProvider = AppStudioTokenInstance;
    const vscodeEnv = detectVsCodeEnv();
    if (vscodeEnv === VsCodeEnv.codespaceBrowser || vscodeEnv === VsCodeEnv.codespaceVsCode) {
      appstudioLogin = AppStudioCodeSpaceTokenInstance;
    }
    const sharepointLogin: SharepointTokenProvider = SharepointTokenInstance;

    const m365NotificationCallback = (
      status: string,
      token: string | undefined,
      accountInfo: Record<string, unknown> | undefined
    ) => {
      if (status === signedIn) {
        window.showInformationMessage(StringResources.vsc.handlers.m365SignIn);
      } else if (status === signedOut) {
        window.showInformationMessage(StringResources.vsc.handlers.m365SignOut);
      }
      return Promise.resolve();
    };
    appstudioLogin.setStatusChangeMap("successfully-sign-in-m365", m365NotificationCallback, false);
    sharepointLogin.setStatusChangeMap(
      "successfully-sign-in-m365",
      m365NotificationCallback,
      false
    );
    graphLogin.setStatusChangeMap("successfully-sign-in-m365", m365NotificationCallback, false);
    tools = {
      logProvider: VsCodeLogInstance,
      tokenProvider: {
        azureAccountProvider: AzureAccountManager,
        graphTokenProvider: GraphManagerInstance,
        appStudioToken: appstudioLogin,
        sharepointTokenProvider: SharepointTokenInstance,
      },
      telemetryReporter: telemetry,
      treeProvider: TreeViewManagerInstance.getTreeView("teamsfx-accounts")!,
      ui: VS_CODE_UI,
      expServiceProvider: exp.getExpService(),
    };
    core = new FxCore(tools);
    registerCoreEvents();
    await registerAccountTreeHandler();
    await envTree.registerEnvTreeHandler();
    await openMarkdownHandler();
    await openSampleReadmeHandler();
    automaticNpmInstallHandler(false, false, false);
    await postUpgrade();
    ExtTelemetry.isFromSample = await getIsFromSample();
    ExtTelemetry.settingsVersion = await getSettingsVersion();

    if (workspacePath) {
      // refresh env tree when env config files added or deleted.
      workspace.onDidCreateFiles(async (event) => {
        await refreshEnvTreeOnFileChanged(workspacePath, event.files);
      });

      workspace.onDidDeleteFiles(async (event) => {
        await refreshEnvTreeOnFileChanged(workspacePath, event.files);
      });

      workspace.onDidRenameFiles(async (event) => {
        const files = [];
        for (const f of event.files) {
          files.push(f.newUri);
          files.push(f.oldUri);
        }

        await refreshEnvTreeOnFileChanged(workspacePath, files);
      });
    }
  } catch (e) {
    const FxError: FxError = {
      name: e.name,
      source: ExtensionSource,
      message: e.message,
      stack: e.stack,
      timestamp: new Date(),
    };
    showError(FxError);
    return err(FxError);
  }
  return result;
}

async function getIsFromSample() {
  if (core) {
    const input = getSystemInputs();
    input.ignoreEnvInfo = true;
    await core.getProjectConfig(input);

    return core.isFromSample;
  }
  return undefined;
}

// only used for telemetry
async function getSettingsVersion(): Promise<string | undefined> {
  if (core) {
    const input = getSystemInputs();
    input.ignoreEnvInfo = true;

    // TODO: from the experience of 'is-from-sample':
    // in some circumstances, getProjectConfig() returns undefined even projectSettings.json is valid.
    // This is a workaround to prevent that. We can change to the following code after the root cause is found.
    // const projectConfig = await core.getProjectConfig(input);
    // ignore errors for telemetry
    // if (projectConfig.isOk()) {
    //   return projectConfig.value?.settings?.version;
    // }
    await core.getProjectConfig(input);
    return core.settingsVersion;
  }
  return undefined;
}

async function refreshEnvTreeOnFileChanged(workspacePath: string, files: readonly Uri[]) {
  let needRefresh = false;
  for (const file of files) {
    // check if file is env config
    if (environmentManager.isEnvConfig(workspacePath, file.fsPath)) {
      needRefresh = true;
      break;
    }
  }

  if (needRefresh) {
    await envTree.registerEnvTreeHandler();
  }
}

function registerCoreEvents() {
  const developmentView = TreeViewManagerInstance.getTreeView("teamsfx-development");
  if (developmentView instanceof CommandsWebviewProvider) {
    core.on(CoreCallbackEvent.lock, () => {
      (
        TreeViewManagerInstance.getTreeView("teamsfx-development") as CommandsWebviewProvider
      ).onLockChanged(true);
    });
    core.on(CoreCallbackEvent.unlock, () => {
      (
        TreeViewManagerInstance.getTreeView("teamsfx-development") as CommandsWebviewProvider
      ).onLockChanged(false);
    });
  }

  const deploymentView = TreeViewManagerInstance.getTreeView("teamsfx-deployment");
  if (deploymentView instanceof CommandsWebviewProvider) {
    core.on(CoreCallbackEvent.lock, () => {
      (
        TreeViewManagerInstance.getTreeView("teamsfx-deployment") as CommandsWebviewProvider
      ).onLockChanged(true);
    });
    core.on(CoreCallbackEvent.unlock, () => {
      (
        TreeViewManagerInstance.getTreeView("teamsfx-deployment") as CommandsWebviewProvider
      ).onLockChanged(false);
    });
  }
}

export async function getAzureSolutionSettings(): Promise<AzureSolutionSettings | undefined> {
  const input = getSystemInputs();
  input.ignoreEnvInfo = true;
  const projectConfigRes = await core.getProjectConfig(input);

  if (projectConfigRes?.isOk()) {
    if (projectConfigRes.value) {
      return projectConfigRes.value.settings?.solutionSettings as AzureSolutionSettings;
    }
  }
  // else {
  //   showError(projectConfigRes.error);
  // }
  return undefined;
}

export function getSystemInputs(): Inputs {
  const answers: Inputs = {
    projectPath: getWorkspacePath(),
    platform: Platform.VSCode,
    vscodeEnv: detectVsCodeEnv(),
    "function-dotnet-checker-enabled": vscodeHelper.isDotnetCheckerEnabled(),
  };
  return answers;
}

export async function createNewProjectHandler(args?: any[]): Promise<Result<any, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.CreateProjectStart, getTriggerFromProperty(args));
  const result = await runCommand(Stage.create);
  if (result.isOk()) {
    await ExtTelemetry.dispose();
    // after calling dispose(), let reder process to wait for a while instead of directly call "open folder"
    // otherwise, the flush operation in dispose() will be interrupted due to shut down the render process.
    setTimeout(() => {
      commands.executeCommand("vscode.openFolder", result.value);
    }, 2000);
  }
  return result;
}

export async function migrateV1ProjectHandler(args?: any[]): Promise<Result<any, FxError>> {
  ExtTelemetry.sendTelemetryEvent(
    TelemetryEvent.MigrateV1ProjectStart,
    getTriggerFromProperty(args)
  );
  const result = await runCommand(Stage.migrateV1);
  if (result.isOk()) {
    commands.executeCommand("workbench.action.reloadWindow", result.value);
  }
  return result;
}

export async function selectAndDebugHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.RunIconDebugStart);
  const result = await selectAndDebug();
  await processResult(TelemetryEvent.RunIconDebug, result);
  return result;
}

export async function treeViewLocalDebugHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.TreeViewLocalDebug);
  await vscode.commands.executeCommand("workbench.action.quickOpen", "debug ");

  return ok(null);
}

export async function treeViewPreviewHandler(env: string): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.TreeViewPreviewStart);
  const debugConfig = await commonUtils.getDebugConfig(false, env);
  if (!debugConfig?.appId) {
    const error = returnUserError(
      new Error(StringResources.vsc.handlers.teamsAppIdNotFound),
      ExtensionSource,
      ExtensionErrors.TeamsAppIdNotFoundError
    );
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.TreeViewPreview, error);
    return err(error);
  }

  const accountHint = await generateAccountHint();
  // eslint-disable-next-line no-secrets/no-secrets
  const uri = `https://teams.microsoft.com/l/app/${debugConfig.appId}?installAppPackage=true&webjoin=true&${accountHint}`;
  await vscode.env.openExternal(Uri.parse(uri));
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.TreeViewPreview, {
    [TelemetryProperty.Success]: TelemetrySuccess.Yes,
  });
  return ok(null);
}

export async function addResourceHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.AddResourceStart, getTriggerFromProperty(args));
  const func: Func = {
    namespace: "fx-solution-azure",
    method: "addResource",
  };
  let excludeBackend = true;
  try {
    const localEnvManager = new LocalEnvManager(
      VsCodeLogInstance,
      ExtTelemetry.reporter,
      VS_CODE_UI
    );
    const projectSettings = await localEnvManager.getProjectSettings(ext.workspaceUri.fsPath);
    excludeBackend = ProjectSettingsHelper.includeBackend(projectSettings);
  } catch (error) {
    VsCodeLogInstance.warning(`${error}`);
  }
  const result = await runUserTask(func, TelemetryEvent.AddResource, true);
  if (result.isOk() && !excludeBackend) {
    await globalStateUpdate("automaticNpmInstall", true);
    automaticNpmInstallHandler(true, excludeBackend, true);
  }
  return result;
}

export async function addCapabilityHandler(args: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.AddCapStart, getTriggerFromProperty(args));
  const func: Func = {
    namespace: "fx-solution-azure",
    method: "addCapability",
  };
  let excludeFrontend = true,
    excludeBot = true;
  try {
    const localEnvManager = new LocalEnvManager(
      VsCodeLogInstance,
      ExtTelemetry.reporter,
      VS_CODE_UI
    );
    const projectSettings = await localEnvManager.getProjectSettings(ext.workspaceUri.fsPath);
    excludeFrontend = ProjectSettingsHelper.includeFrontend(projectSettings);
    excludeBot = ProjectSettingsHelper.includeBot(projectSettings);
  } catch (error) {
    VsCodeLogInstance.warning(`${error}`);
  }
  const result = await runUserTask(func, TelemetryEvent.AddCap, true);
  if (result.isOk()) {
    await globalStateUpdate("automaticNpmInstall", true);
    automaticNpmInstallHandler(excludeFrontend, true, excludeBot);
  }
  return result;
}

export async function validateManifestHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(
    TelemetryEvent.ValidateManifestStart,
    getTriggerFromProperty(args)
  );

  const func: Func = {
    namespace: "fx-solution-azure",
    method: "validateManifest",
  };
  return await runUserTask(func, TelemetryEvent.ValidateManifest, false);
}

/**
 * Ask user to select environment, local is included
 */
async function askTargetEnvironment(): Promise<Result<string, FxError>> {
  const projectPath = getWorkspacePath();
  if (!isValidProject(projectPath)) {
    return err(InvalidProjectError());
  }
  const envProfilesResult = await environmentManager.listRemoteEnvConfigs(projectPath!);
  if (envProfilesResult.isErr()) {
    return err(envProfilesResult.error);
  }
  const config: SingleSelectConfig = {
    name: "targetEnvName",
    title: "Select an environment",
    options: envProfilesResult.value.concat(["local"]),
  };
  const selectedEnv = await VS_CODE_UI.selectOption(config);
  if (selectedEnv.isErr()) {
    return err(selectedEnv.error);
  } else {
    return ok(selectedEnv.value.result as string);
  }
}

export async function buildPackageHandler(args?: any[]): Promise<Result<any, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.BuildStart, getTriggerFromProperty(args));

  const func: Func = {
    namespace: "fx-solution-azure",
    method: "buildPackage",
    params: {
      type: "",
    },
  };

  if (args && args.length > 0 && args[0] != CommandsTreeViewProvider.TreeViewFlag) {
    func.params.type = args[0];
    const isLocalDebug = args[0] === "localDebug";
    if (isLocalDebug) {
      return await runUserTask(func, TelemetryEvent.Build, true);
    } else {
      return await runUserTask(func, TelemetryEvent.Build, false, args[1]);
    }
  } else {
    const selectedEnv = await askTargetEnvironment();
    if (selectedEnv.isErr()) {
      return err(selectedEnv.error);
    }
    const env = selectedEnv.value;
    const isLocalDebug = env === "local";
    if (isLocalDebug) {
      func.params.type = "localDebug";
      return await runUserTask(func, TelemetryEvent.Build, true);
    } else {
      func.params.type = "remote";
      return await runUserTask(func, TelemetryEvent.Build, false, env);
    }
  }
}

export async function provisionHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ProvisionStart, getTriggerFromProperty(args));
  const result = await runCommand(Stage.provision);

  if (result.isErr() && isUserCancelError(result.error)) {
    return result;
  } else {
    // refresh env tree except provision cancelled.
    await envTree.registerEnvTreeHandler();
    return result;
  }
}

export async function deployHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.DeployStart, getTriggerFromProperty(args));
  return await runCommand(Stage.deploy);
}

export async function publishHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.PublishStart, getTriggerFromProperty(args));
  return await runCommand(Stage.publish);
}

export async function cicdGuideHandler(args?: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.CICDInsiderGuide, getTriggerFromProperty(args));

  const cicdGuideLink = "https://aka.ms/teamsfx-cicd-insider-guide";

  return await env.openExternal(Uri.parse(cicdGuideLink));
}

export async function runCommand(
  stage: Stage,
  defaultInputs?: Inputs
): Promise<Result<any, FxError>> {
  const eventName = ExtTelemetry.stageToEvent(stage);
  let result: Result<any, FxError> = ok(null);
  let inputs: Inputs | undefined;
  try {
    const checkCoreRes = checkCoreNotEmpty();
    if (checkCoreRes.isErr()) {
      throw checkCoreRes.error;
    }

    inputs = defaultInputs ? defaultInputs : getSystemInputs();
    inputs.stage = stage;

    switch (stage) {
      case Stage.create: {
        if (TreatmentVariableValue.removeCreateFromSample) {
          inputs["scratch"] = inputs["scratch"] ?? "yes";
          inputs.projectId = inputs.projectId ?? uuid.v4();
        }
        const tmpResult = await core.createProject(inputs);
        if (tmpResult.isErr()) {
          result = err(tmpResult.error);
        } else {
          const uri = Uri.file(tmpResult.value);
          result = ok(uri);
        }
        break;
      }
      case Stage.migrateV1: {
        const tmpResult = await core.migrateV1Project(inputs);
        if (tmpResult.isErr()) {
          result = err(tmpResult.error);
        } else {
          if (tmpResult?.value) {
            const uri = Uri.file(tmpResult.value);
            result = ok(uri);
          }
        }
        break;
      }
      case Stage.provision: {
        result = await core.provisionResources(inputs);
        break;
      }
      case Stage.deploy: {
        result = await core.deployArtifacts(inputs);
        break;
      }
      case Stage.publish: {
        result = await core.publishApplication(inputs);
        break;
      }
      case Stage.debug: {
        if (isConfigUnifyEnabled()) {
          inputs.ignoreEnvInfo = false;
        } else {
          inputs.ignoreEnvInfo = true;
        }
        inputs.checkerInfo = {
          skipNgrok: !vscodeHelper.isNgrokCheckerEnabled(),
          trustDevCert: vscodeHelper.isTrustDevCertEnabled(),
        };
        result = await core.localDebug(inputs);
        break;
      }
      case Stage.createEnv: {
        result = await core.createEnv(inputs);
        break;
      }
      case Stage.listCollaborator: {
        result = await core.listCollaborator(inputs);
        break;
      }
      default:
        throw new SystemError(
          ExtensionErrors.UnsupportedOperation,
          util.format(StringResources.vsc.handlers.operationNotSupport, stage),
          ExtensionSource
        );
    }
  } catch (e) {
    result = wrapError(e);
  }

  await processResult(eventName, result, inputs);

  return result;
}

export async function downloadSample(inputs: Inputs): Promise<Result<any, FxError>> {
  let result: Result<any, FxError> = ok(null);
  try {
    const checkCoreRes = checkCoreNotEmpty();
    if (checkCoreRes.isErr()) {
      throw checkCoreRes.error;
    }

    inputs.stage = Stage.create;
    inputs["scratch"] = "no";
    const tmpResult = await core.createProject(inputs);
    if (tmpResult.isErr()) {
      result = err(tmpResult.error);
    } else {
      const uri = Uri.file(tmpResult.value);
      result = ok(uri);
    }
  } catch (e) {
    result = wrapError(e);
  }

  if (result.isErr()) {
    const error = result.error;
    if (!isUserCancelError(error)) {
      if (isLoginFailureError(error)) {
        window.showErrorMessage(StringResources.vsc.handlers.loginFailed);
      } else {
        showError(error);
      }
    }
  }

  return result;
}

export function detectVsCodeEnv(): VsCodeEnv {
  // extensionKind returns ExtensionKind.UI when running locally, so use this to detect remote
  const extension = vscode.extensions.getExtension("TeamsDevApp.ms-teams-vscode-extension");

  if (extension?.extensionKind === vscode.ExtensionKind.Workspace) {
    // running remotely
    // Codespaces browser-based editor will return UIKind.Web for uiKind
    if (vscode.env.uiKind === vscode.UIKind.Web) {
      return VsCodeEnv.codespaceBrowser;
    } else if (vscode.env.remoteName === "codespaces") {
      return VsCodeEnv.codespaceVsCode;
    } else {
      return VsCodeEnv.remote;
    }
  } else {
    // running locally
    return VsCodeEnv.local;
  }
}

export async function runUserTask(
  func: Func,
  eventName: string,
  ignoreEnvInfo: boolean,
  envName?: string
): Promise<Result<any, FxError>> {
  let result: Result<any, FxError> = ok(null);
  let inputs: Inputs | undefined;
  try {
    const checkCoreRes = checkCoreNotEmpty();
    if (checkCoreRes.isErr()) {
      throw checkCoreRes.error;
    }

    inputs = getSystemInputs();
    inputs.ignoreEnvInfo = ignoreEnvInfo;
    inputs.env = envName;
    result = await core.executeUserTask(func, inputs);
  } catch (e) {
    result = wrapError(e);
  }

  await processResult(eventName, result, inputs);

  return result;
}

//TODO workaround
function isLoginFailureError(error: FxError): boolean {
  return !!error.message && error.message.includes("Cannot get user login information");
}

function showWarningMessageWithProvisionButton(message: string): void {
  window
    .showWarningMessage(message, StringResources.vsc.handlers.provisionResourcesButton)
    .then((result) => {
      if (result === StringResources.vsc.handlers.provisionResourcesButton) {
        return Correlator.run(provisionHandler);
      }
    });
}

async function showGrantSuccessMessageWithGetHelpButton(
  message: string,
  helpUrl: string
): Promise<void> {
  window.showInformationMessage(message, StringResources.vsc.handlers.getHelp).then((result) => {
    if (result === StringResources.vsc.handlers.getHelp) {
      return VS_CODE_UI.openUrl(helpUrl);
    }
  });
}

async function checkCollaborationState(env: string): Promise<Result<any, FxError>> {
  try {
    const provisionSucceeded = await getProvisionSucceedFromEnv(env);
    if (!provisionSucceeded) {
      return ok({
        state: CollaborationState.NotProvisioned,
        message: StringResources.vsc.handlers.provisionBeforeGrantOrListPermission,
      });
    }

    const tokenJsonObject = await AppStudioTokenInstance.getJsonObject(true);
    if (tokenJsonObject) {
      const m365TenantId = await getM365TenantFromEnv(env);
      if (!m365TenantId) {
        return ok({
          state: CollaborationState.EmptyM365Tenant,
          message: StringResources.vsc.commandsTreeViewProvider.emptyM365Tenant,
        });
      }
      if (tokenJsonObject.tid !== m365TenantId) {
        return ok({
          state: CollaborationState.M365TenantNotMatch,
          message: StringResources.vsc.commandsTreeViewProvider.m365TenantNotMatch,
        });
      }
    } else {
      return ok({
        state: CollaborationState.m365AccountNotSignedIn,
        message: StringResources.vsc.commandsTreeViewProvider.m365AccountNotSignedIn,
      });
    }

    return ok({
      state: CollaborationState.OK,
    });
  } catch (e) {
    return wrapError(e);
  }
}

async function processResult(
  eventName: string | undefined,
  result: Result<null, FxError>,
  inputs?: Inputs
) {
  const envProperty: { [key: string]: string } = {};
  const createProperty: { [key: string]: string } = {};

  if (inputs?.env) {
    envProperty[TelemetryProperty.Env] = getHashedEnv(inputs.env);
    envProperty[TelemetryProperty.AapId] = getTeamsAppIdByEnv(inputs.env);
  }
  if (eventName == TelemetryEvent.CreateProject && inputs?.projectId) {
    createProperty[TelemetryProperty.NewProjectId] = inputs?.projectId;
  }

  if (result.isErr()) {
    if (eventName) {
      ExtTelemetry.sendTelemetryErrorEvent(eventName, result.error, {
        ...createProperty,
        ...envProperty,
      });
    }
    const error = result.error;
    if (isUserCancelError(error)) {
      return;
    }
    if (isLoginFailureError(error)) {
      window.showErrorMessage(StringResources.vsc.handlers.loginFailed);
      return;
    }
    showError(error);
  } else {
    if (eventName) {
      if (eventName === TelemetryEvent.CreateNewEnvironment) {
        if (inputs?.sourceEnvName) {
          envProperty[TelemetryProperty.SourceEnv] = getHashedEnv(inputs.sourceEnvName);
        }
        if (inputs?.targetEnvName) {
          envProperty[TelemetryProperty.TargetEnv] = getHashedEnv(inputs.targetEnvName);
        }
      }
      ExtTelemetry.sendTelemetryEvent(eventName, {
        [TelemetryProperty.Success]: TelemetrySuccess.Yes,
        ...createProperty,
        ...envProperty,
      });
    }
  }
}

function wrapError(e: Error): Result<null, FxError> {
  if (
    e instanceof UserError ||
    e instanceof SystemError ||
    (e.constructor &&
      e.constructor.name &&
      (e.constructor.name === "SystemError" || e.constructor.name === "UserError"))
  ) {
    return err(e as FxError);
  }
  return err(returnSystemError(e, ExtensionSource, ExtensionErrors.UnknwonError));
}

function checkCoreNotEmpty(): Result<null, SystemError> {
  if (!core) {
    return err(
      returnSystemError(
        new Error(StringResources.vsc.handlers.coreNotReady),
        ExtensionSource,
        ExtensionErrors.UnsupportedOperation
      )
    );
  }
  return ok(null);
}

export async function validateAzureDependenciesHandler(): Promise<string | undefined> {
  const nodeType = (await vscodeHelper.hasFunction()) ? DepsType.FunctionNode : DepsType.AzureNode;
  const deps = [nodeType, DepsType.Dotnet, DepsType.FuncCoreTools, DepsType.Ngrok];

  const vscodeDepsChecker = new VSCodeDepsChecker(vscodeLogger, vscodeTelemetry);
  const shouldContinue = await vscodeDepsChecker.resolve(deps);

  if (!shouldContinue) {
    await debug.stopDebugging();
    // return non-zero value to let task "exit ${command:xxx}" to exit
    return "1";
  }
}

/**
 * check & install required dependencies during local debug when selected hosting type is SPFx.
 */
export async function validateSpfxDependenciesHandler(): Promise<string | undefined> {
  const vscodeDepsChecker = new VSCodeDepsChecker(vscodeLogger, vscodeTelemetry);
  const shouldContinue = await vscodeDepsChecker.resolve([DepsType.SpfxNode, DepsType.Ngrok]);
  if (!shouldContinue) {
    await debug.stopDebugging();
    // return non-zero value to let task "exit ${command:xxx}" to exit
    return "1";
  }
}

/**
 * Check & install required local prerequisites before local debug.
 */
export async function validateLocalPrerequisitesHandler(): Promise<string | undefined> {
  const result = await localPrerequisites.checkAndInstall();
  if (result.isErr()) {
    await debug.stopDebugging();
    // return non-zero value to let task "exit ${command:xxx}" to exit
    return "1";
  }
}

/**
 * install functions binding before launch local debug
 */
export async function backendExtensionsInstallHandler(): Promise<string | undefined> {
  if (workspace.workspaceFolders && workspace.workspaceFolders.length > 0) {
    const workspaceFolder = workspace.workspaceFolders[0];
    const backendRoot = await commonUtils.getProjectRoot(
      workspaceFolder.uri.fsPath,
      FolderName.Function
    );

    if (backendRoot) {
      const depsChecker = new VSCodeDepsChecker(vscodeLogger, vscodeTelemetry);
      const shouldContinue = await installBackendExtension(backendRoot, depsChecker, vscodeLogger);
      if (!shouldContinue) {
        await debug.stopDebugging();
        // return non-zero value to let task "exit ${command:xxx}" to exit
        return "1";
      }
    }
  }
}

/**
 * Get func binary path to be referenced by task definition.
 * Usage like ${env:PATH}${command:...} so need to include delimiter as well
 */
export async function getFuncPathHandler(): Promise<string> {
  try {
    const vscodeDepsChecker = new VSCodeDepsChecker(vscodeLogger, vscodeTelemetry);
    const funcStatus = await vscodeDepsChecker.getDepsStatus(DepsType.FuncCoreTools);
    if (funcStatus?.details?.binFolders !== undefined) {
      return `${path.delimiter}${funcStatus.details.binFolders.join(path.delimiter)}`;
    }
  } catch (error: any) {
    showError(assembleError(error));
  }

  return "";
}

/**
 * call localDebug on core
 */
export async function preDebugCheckHandler(): Promise<string | undefined> {
  try {
    const localAppId = (await commonUtils.getLocalTeamsAppId()) as string;
    ExtTelemetry.sendTelemetryEvent(TelemetryEvent.DebugPreCheck, {
      [TelemetryProperty.DebugAppId]: localAppId,
    });
  } catch {
    // ignore telemetry error
  }

  let result: Result<any, FxError> = ok(null);
  result = await runCommand(Stage.debug);
  if (result.isErr()) {
    try {
      const localAppId = (await commonUtils.getLocalTeamsAppId()) as string;
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.DebugPreCheck, result.error, {
        [TelemetryProperty.DebugAppId]: localAppId,
      });
    } finally {
      // ignore telemetry error
      terminateAllRunningTeamsfxTasks();
      await debug.stopDebugging();
      // return non-zero value to let task "exit ${command:xxx}" to exit
      return "1";
    }
  }

  const portsInUse = await commonUtils.getPortsInUse();
  if (portsInUse.length > 0) {
    let message: string;
    if (portsInUse.length > 1) {
      message = util.format(
        StringResources.vsc.localDebug.portsAlreadyInUse,
        portsInUse.join(", ")
      );
    } else {
      message = util.format(StringResources.vsc.localDebug.portAlreadyInUse, portsInUse[0]);
    }
    const error = new UserError(ExtensionErrors.PortAlreadyInUse, message, ExtensionSource);
    try {
      const localAppId = (await commonUtils.getLocalTeamsAppId()) as string;
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.DebugPreCheck, error, {
        [TelemetryProperty.DebugAppId]: localAppId,
      });
    } finally {
      // ignore telemetry error
      terminateAllRunningTeamsfxTasks();
      await debug.stopDebugging();
      VS_CODE_UI.showMessage(
        "error",
        message,
        false,
        StringResources.vsc.localDebug.learnMore
      ).then(async (result) => {
        if (result.isOk() && result.value === StringResources.vsc.localDebug.learnMore) {
          await VS_CODE_UI.openUrl(constants.portInUseHelpLink);
        }
      });
      // return non-zero value to let task "exit ${command:xxx}" to exit
      return "1";
    }
  }
}

export async function openDocumentHandler(args: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Documentation, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://aka.ms/teamsfx-build-first-app"));
}

export async function openAccountLinkHandler(args: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Documentation, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://aka.ms/teamsfx-treeview-account"));
}

export async function openEnvLinkHandler(args: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Documentation, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://aka.ms/teamsfx-treeview-environment"));
}

export async function openDevelopmentLinkHandler(args: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Documentation, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://aka.ms/teamsfx-treeview-development"));
}

export async function openDeploymentLinkHandler(args: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Documentation, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://aka.ms/teamsfx-treeview-deployment"));
}

export async function openHelpFeedbackLinkHandler(args: any[]): Promise<boolean> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Documentation, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://aka.ms/teamsfx-treeview-helpnfeedback"));
}
export async function openWelcomeHandler(args?: any[]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.QuickStart, getTriggerFromProperty(args));
  vscode.commands.executeCommand(
    "workbench.action.openWalkthrough",
    "TeamsDevApp.ms-teams-vscode-extension#teamsToolkitQuickStart"
  );
}

export async function checkUpgrade(args?: any[]) {
  // just for triggering upgrade check for multi-env && bicep.
  await runCommand(Stage.listCollaborator);
}

export async function openSurveyHandler(args?: any[]) {
  WebviewPanel.createOrShow(PanelType.Survey);
}

function getTriggerFromProperty(args?: any[]) {
  // if not args are not supplied, by default, it is trigger from "CommandPalette"
  // e.g. vscode.commands.executeCommand("fx-extension.openWelcome");
  // in this case, "fx-exentiosn.openWelcome" is trigged from "CommandPalette".
  if (!args || (args && args.length === 0)) {
    return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.CommandPalette };
  }

  switch (args[0].toString()) {
    case TelemetryTiggerFrom.TreeView:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.TreeView };
    case TelemetryTiggerFrom.Webview:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.Webview };
    case TelemetryTiggerFrom.CodeLens:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.CodeLens };
    case TelemetryTiggerFrom.EditorTitle:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.EditorTitle };
    case TelemetryTiggerFrom.SideBar:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.SideBar };
    case TelemetryTiggerFrom.Other:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.Other };
    default:
      return { [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.Unknow };
  }
}

async function openMarkdownHandler() {
  const afterScaffold = globalStateGet("openReadme", false);
  if (afterScaffold && workspace.workspaceFolders && workspace.workspaceFolders.length > 0) {
    await globalStateUpdate("openReadme", false);
    const workspaceFolder = workspace.workspaceFolders[0];
    const workspacePath: string = workspaceFolder.uri.fsPath;
    let targetFolder: string | undefined;
    if (await isMigrateFromV1Project(workspacePath)) {
      targetFolder = workspacePath;
    } else if (await isSPFxProject(workspacePath)) {
      showLocalDebugMessage();
      targetFolder = `${workspacePath}/SPFx`;
    } else {
      showLocalDebugMessage();
      const tabFolder = await commonUtils.getProjectRoot(workspacePath, FolderName.Frontend);
      const botFolder = await commonUtils.getProjectRoot(workspacePath, FolderName.Bot);
      if (tabFolder && botFolder) {
        targetFolder = workspacePath;
      } else if (tabFolder) {
        targetFolder = tabFolder;
      } else {
        targetFolder = botFolder;
      }
    }
    // When tab and bot coexist, readme file would reside in project root folder.
    // Naming it README.md could accidently overwrite our users' own readme file.
    // So we name it README-auto-generated.md here.
    const autoGeneratedReadmePath = `${targetFolder}/${AutoGeneratedReadme}`;
    const uri = (await fs.pathExists(autoGeneratedReadmePath))
      ? Uri.file(autoGeneratedReadmePath)
      : Uri.file(`${targetFolder}/README.md`);

    workspace.openTextDocument(uri).then(() => {
      const PreviewMarkdownCommand = "markdown.showPreview";
      commands.executeCommand(PreviewMarkdownCommand, uri);
    });
  }
}

async function postUpgrade(): Promise<void> {
  await openUpgradeChangeLogsHandler();
  await popupAfterUpgrade();
}

async function popupAfterUpgrade(): Promise<void> {
  const aadClientSecretFlag = "NeedToSetAADClientSecretEnv";
  const aadClientSecret = globalStateGet(aadClientSecretFlag, "");
  if (
    aadClientSecret !== "" &&
    workspace.workspaceFolders &&
    workspace.workspaceFolders.length > 0
  ) {
    try {
      const learnMoreLink = StringResources.vsc.upgradeToMultiEnvAndBicep.learnMoreLink;
      const learnMoreText = StringResources.vsc.upgradeToMultiEnvAndBicep.learnMoreText;
      const option = { modal: false };
      const outputMsg = util.format(
        StringResources.vsc.upgradeToMultiEnvAndBicep.outputMsg,
        aadClientSecret,
        learnMoreLink
      );
      const showMsg = util.format(
        StringResources.vsc.upgradeToMultiEnvAndBicep.showMsg,
        aadClientSecret
      );
      VsCodeLogInstance.warning(outputMsg);
      window.showWarningMessage(showMsg, option, learnMoreText).then((result) => {
        if (result === learnMoreText) {
          return env.openExternal(Uri.parse(learnMoreLink));
        }
      });
    } finally {
      await globalStateUpdate(aadClientSecretFlag, "");
    }
  }
}

async function openUpgradeChangeLogsHandler() {
  const openUpgradeChangelogsFlag = "openUpgradeChangelogs";
  if (
    globalStateGet(openUpgradeChangelogsFlag, false) &&
    workspace.workspaceFolders &&
    workspace.workspaceFolders.length > 0
  ) {
    try {
      await globalStateUpdate(openUpgradeChangelogsFlag, false);

      const workspacePath: string = workspace.workspaceFolders[0].uri.fsPath;
      const backupName = ".backup";
      const changeLogsName = "upgrade-change-logs.md";
      const changeLogsPath: string = (await fs.pathExists(
        path.join(workspacePath, backupName, changeLogsName)
      ))
        ? path.join(workspacePath, backupName, changeLogsName)
        : path.join(workspacePath, `.teamsfx${backupName}`, changeLogsName);
      const uri = Uri.file(changeLogsPath);

      workspace.openTextDocument(uri).then(() => {
        const PreviewMarkdownCommand = "markdown.showPreview";
        commands.executeCommand(PreviewMarkdownCommand, uri);
      });
    } catch (err) {
      // do nothing
    }
  }
}

async function openSampleReadmeHandler() {
  const afterScaffold = globalStateGet("openSampleReadme", false);
  if (afterScaffold && workspace.workspaceFolders && workspace.workspaceFolders.length > 0) {
    globalStateUpdate("openSampleReadme", false);
    showLocalDebugMessage();
    const workspaceFolder = workspace.workspaceFolders[0];
    const workspacePath: string = workspaceFolder.uri.fsPath;
    const uri = Uri.file(`${workspacePath}/README.md`);
    workspace.openTextDocument(uri).then(() => {
      const PreviewMarkdownCommand = "markdown.showPreview";
      commands.executeCommand(PreviewMarkdownCommand, uri);
    });
  }
}

async function showLocalDebugMessage() {
  const localDebug = {
    title: StringResources.vsc.handlers.localDebugTitle,
    run: async (): Promise<void> => {
      selectAndDebug();
    },
  };

  const config = {
    title: StringResources.vsc.handlers.configTitle,
    run: async (): Promise<void> => {
      commands.executeCommand(
        "workbench.action.openSettings",
        "fx-extension.defaultProjectRootDirectory"
      );
    },
  };

  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ShowLocalDebugNotification);
  vscode.window
    .showInformationMessage(
      util.format(StringResources.vsc.handlers.localDebugDescription, getWorkspacePath()),
      config,
      localDebug
    )
    .then((selection) => {
      if (selection?.title === StringResources.vsc.handlers.localDebugTitle) {
        ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ClickLocalDebug);
        selection.run();
      } else if (selection?.title === StringResources.vsc.handlers.configTitle) {
        ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ClickChangeLocation);
        selection.run();
      }
    });
}

export async function openSamplesHandler(args?: any[]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.Samples, getTriggerFromProperty(args));
  WebviewPanel.createOrShow(PanelType.SampleGallery);
}

export async function openAppManagement(args?: any[]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ManageTeamsApp, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://dev.teams.microsoft.com/home"));
}

export async function openBotManagement(args?: any[]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ManageTeamsBot, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://dev.teams.microsoft.com/bots"));
}

export async function openReportIssues(args?: any[]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ReportIssues, getTriggerFromProperty(args));
  return env.openExternal(Uri.parse("https://github.com/OfficeDev/TeamsFx/issues"));
}

export async function openExternalHandler(args?: any[]) {
  if (args && args.length > 0) {
    const url = args[0].url;
    return env.openExternal(Uri.parse(url));
  }
}

export async function openManifestHandler(args?: any[]): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(
    TelemetryEvent.OpenManifestEditorStart,
    getTriggerFromProperty(args)
  );
  const projectPath = getWorkspacePath();
  if (!projectPath) {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.OpenManifestEditor, InvalidProjectError());
    return err(InvalidProjectError());
  }
  const appDirectory = await getAppDirectory(projectPath!);
  if (!(await fs.pathExists(appDirectory))) {
    const invalidProjectError: FxError = InvalidProjectError();
    showError(invalidProjectError);
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.OpenManifestEditor, invalidProjectError);
    return err(invalidProjectError);
  }

  const selectedEnv = await askTargetEnvironment();
  if (selectedEnv.isErr()) {
    return err(selectedEnv.error);
  }
  const env = selectedEnv.value;

  const func: Func = {
    namespace: "fx-solution-azure/fx-resource-appstudio",
    method: "getManifestTemplatePath",
    params: {
      type: env === "local" ? "localDebug" : "remote",
    },
  };
  const res = await runUserTask(func, TelemetryEvent.ValidateManifest, true);
  if (res.isOk()) {
    const manifestFile = res.value as string;
    if (fs.existsSync(manifestFile)) {
      workspace.openTextDocument(manifestFile).then((document) => {
        window.showTextDocument(document);
      });
      ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenManifestEditor, {
        [TelemetryProperty.Success]: TelemetrySuccess.Yes,
      });
      return ok(null);
    } else {
      const FxError = new SystemError(
        "FileNotFound",
        util.format(StringResources.vsc.handlers.fileNotFound, manifestFile),
        ExtensionSource
      );
      showError(FxError);
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.OpenManifestEditor, FxError);
      return err(FxError);
    }
  } else {
    showError(res.error);
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.OpenManifestEditor, res.error);
    return err(res.error);
  }
}

export async function createNewEnvironment(args?: any[]): Promise<Result<Void, FxError>> {
  ExtTelemetry.sendTelemetryEvent(
    TelemetryEvent.CreateNewEnvironmentStart,
    getTriggerFromProperty(args)
  );
  const result = await runCommand(Stage.createEnv);
  if (!result.isErr()) {
    await envTree.registerEnvTreeHandler();
  }
  return result;
}

export async function refreshEnvironment(args?: any[]): Promise<Result<Void, FxError>> {
  return await envTree.registerEnvTreeHandler();
}

function getSubscriptionUrl(subscriptionInfo: SubscriptionInfo): string {
  const subscriptionId = subscriptionInfo.subscriptionId;
  const tenantId = subscriptionInfo.tenantId;

  return `${AzurePortalUrl}/#@${tenantId}/resource/subscriptions/${subscriptionId}`;
}

enum ResourceInfo {
  Subscription = "Subscription",
  ResourceGroup = "Resource Group",
}

export async function openSubscriptionInPortal(env: string): Promise<Result<Void, FxError>> {
  const telemetryProperties: { [p: string]: string } = {};
  telemetryProperties[TelemetryProperty.Env] = getHashedEnv(env);

  const subscriptionInfo = await getSubscriptionInfoFromEnv(env);
  if (subscriptionInfo) {
    ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenSubscriptionInPortal, telemetryProperties);

    const url = getSubscriptionUrl(subscriptionInfo);
    await vscode.env.openExternal(vscode.Uri.parse(url));

    return ok(Void);
  } else {
    const resourceInfoNotFoundError = new UserError(
      ExtensionErrors.EnvResourceInfoNotFoundError,
      util.format(
        StringResources.vsc.handlers.resourceInfoNotFound,
        ResourceInfo.Subscription,
        env
      ),
      ExtensionSource
    );
    ExtTelemetry.sendTelemetryErrorEvent(
      TelemetryEvent.OpenSubscriptionInPortal,
      resourceInfoNotFoundError,
      telemetryProperties
    );

    return err(resourceInfoNotFoundError);
  }
}

export async function openResourceGroupInPortal(env: string): Promise<Result<Void, FxError>> {
  const telemetryProperties: { [p: string]: string } = {};
  telemetryProperties[TelemetryProperty.Env] = getHashedEnv(env);

  const subscriptionInfo = await getSubscriptionInfoFromEnv(env);
  const resourceGroupName = await getResourceGroupNameFromEnv(env);

  if (subscriptionInfo && resourceGroupName) {
    ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenResourceGroupInPortal, telemetryProperties);

    const url = `${getSubscriptionUrl(subscriptionInfo)}/resourceGroups/${resourceGroupName}`;
    await vscode.env.openExternal(vscode.Uri.parse(url));

    return ok(Void);
  } else {
    let errorMessage = "";
    if (subscriptionInfo) {
      errorMessage = util.format(
        StringResources.vsc.handlers.resourceInfoNotFound,
        ResourceInfo.ResourceGroup,
        env
      );
    } else if (resourceGroupName) {
      errorMessage = util.format(
        StringResources.vsc.handlers.resourceInfoNotFound,
        ResourceInfo.Subscription,
        env
      );
    } else {
      errorMessage = util.format(
        StringResources.vsc.handlers.resourceInfoNotFound,
        `${ResourceInfo.Subscription} and ${ResourceInfo.ResourceGroup}`,
        env
      );
    }

    const resourceInfoNotFoundError = new UserError(
      ExtensionErrors.EnvResourceInfoNotFoundError,
      errorMessage,
      ExtensionSource
    );
    ExtTelemetry.sendTelemetryErrorEvent(
      TelemetryEvent.OpenSubscriptionInPortal,
      resourceInfoNotFoundError,
      telemetryProperties
    );

    return err(resourceInfoNotFoundError);
  }
}

export async function grantPermission(env: string): Promise<Result<any, FxError>> {
  let result: Result<any, FxError> = ok(Void);
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.GrantPermissionStart);

  let inputs: Inputs | undefined;
  try {
    const checkCoreRes = checkCoreNotEmpty();
    if (checkCoreRes.isErr()) {
      throw checkCoreRes.error;
    }

    const collaborationStateResult = await checkCollaborationState(env);
    if (collaborationStateResult.isErr()) {
      throw collaborationStateResult.error;
    }

    if (collaborationStateResult.value.state === CollaborationState.OK) {
      inputs = getSystemInputs();
      inputs.env = env;
      result = await core.grantPermission(inputs);
      if (result.isErr()) {
        throw result.error;
      }
      const grantSucceededMsg = util.format(
        StringResources.vsc.handlers.grantPermissionSucceeded,
        inputs.email,
        env
      );

      let warningMsg = StringResources.vsc.handlers.grantPermissionWarning;
      let helpUrl = AzureAssignRoleHelpUrl;
      if (await isSPFxProject(ext.workspaceUri.fsPath)) {
        warningMsg = StringResources.vsc.handlers.grantPermissionWarningSpfx;
        helpUrl = SpfxManageSiteAdminUrl;
      }

      showGrantSuccessMessageWithGetHelpButton(grantSucceededMsg + " " + warningMsg, helpUrl);

      VsCodeLogInstance.info(grantSucceededMsg);
      VsCodeLogInstance.warning(
        warningMsg + StringResources.vsc.handlers.referLinkForMoreDetails + helpUrl
      );
    } else {
      result = collaborationStateResult;
      if (result.value.state === CollaborationState.NotProvisioned) {
        showWarningMessageWithProvisionButton(result.value.message);
      } else {
        window.showWarningMessage(result.value.message);
      }
    }
  } catch (e) {
    result = wrapError(e);
  }

  await processResult(TelemetryEvent.GrantPermission, result, inputs);
  return result;
}

export async function listCollaborator(env: string): Promise<void> {
  let result: Result<any, FxError> = ok(Void);
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.ListCollaboratorStart);

  let inputs: Inputs | undefined;
  try {
    const checkCoreRes = checkCoreNotEmpty();
    if (checkCoreRes.isErr()) {
      throw checkCoreRes.error;
    }

    const collaborationStateResult = await checkCollaborationState(env);
    if (collaborationStateResult.isErr()) {
      throw collaborationStateResult.error;
    }

    if (collaborationStateResult.value.state === CollaborationState.OK) {
      inputs = getSystemInputs();
      inputs.env = env;

      result = await core.listCollaborator(inputs);
      if (result.isErr()) {
        throw result.error;
      }

      // TODO: For short-term workaround. Remove after webview is ready.
      VsCodeLogInstance.outputChannel.show();
    } else {
      result = collaborationStateResult;
      if (result.value.state === CollaborationState.NotProvisioned) {
        showWarningMessageWithProvisionButton(result.value.message);
      } else {
        window.showWarningMessage(result.value.message);
      }
    }
  } catch (e) {
    result = wrapError(e);
  }

  await processResult(TelemetryEvent.ListCollaborator, result, inputs);
}

export async function openM365AccountHandler() {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenM365Portal);
  return env.openExternal(Uri.parse("https://admin.microsoft.com/Adminportal/"));
}

export async function openAzureAccountHandler() {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenAzurePortal);
  return env.openExternal(Uri.parse("https://portal.azure.com/"));
}

export function saveTextDocumentHandler(document: vscode.TextDocumentWillSaveEvent) {
  if (!isValidProject(getWorkspacePath())) {
    return;
  }

  let reason: TelemetryUpdateAppReason | undefined = undefined;
  switch (document.reason) {
    case vscode.TextDocumentSaveReason.Manual:
      reason = TelemetryUpdateAppReason.Manual;
      break;
    case vscode.TextDocumentSaveReason.AfterDelay:
      reason = TelemetryUpdateAppReason.AfterDelay;
      break;
    case vscode.TextDocumentSaveReason.FocusOut:
      reason = TelemetryUpdateAppReason.FocusOut;
      break;
  }

  let curDirectory = path.dirname(document.document.fileName);
  while (curDirectory) {
    if (isValidProject(curDirectory)) {
      ExtTelemetry.sendTelemetryEvent(TelemetryEvent.UpdateTeamsApp, {
        [TelemetryProperty.UpdateTeamsAppReason]: reason,
      });
      return;
    }

    if (curDirectory === path.join(curDirectory, "..")) {
      break;
    }
    curDirectory = path.join(curDirectory, "..");
  }
}

export async function cmdHdlLoadTreeView(context: ExtensionContext) {
  if (
    await exp
      .getExpService()
      .getTreatmentVariableAsync(
        TreatmentVariables.VSCodeConfig,
        TreatmentVariables.CustomizeTreeview,
        true
      )
  ) {
    vscode.commands.executeCommand("setContext", "fx-extension.customizedTreeview", true);
  } else {
    vscode.commands.executeCommand("setContext", "fx-extension.customizedTreeview", false);
  }
  if (!isValidProject(getWorkspacePath())) {
    const disposables = await TreeViewManagerInstance.registerEmptyProjectTreeViews();
    context.subscriptions.push(...disposables);
  } else {
    const disposables = await TreeViewManagerInstance.registerTreeViews(getWorkspacePath());
    context.subscriptions.push(...disposables);
  }

  // Register SignOut tree view command
  commands.registerCommand("fx-extension.signOut", async (node: TreeViewCommand) => {
    try {
      switch (node.contextValue) {
        case "signedinM365": {
          Correlator.run(() => {
            signOutM365(true);
          });
          break;
        }
        case "signedinAzure": {
          Correlator.run(() => {
            signOutAzure(true);
          });
          break;
        }
      }
    } catch (e) {
      showError(e);
    }
  });

  commands.registerCommand("fx-extension.signInGuideline", async (node: TreeViewCommand) => {
    // TODO: update the link when documentation is ready
    switch (node.contextValue) {
      case "signinM365": {
        await env.openExternal(Uri.parse("https://www.office.com/"));
        break;
      }
      case "signinAzure": {
        await env.openExternal(Uri.parse("https://portal.azure.com/"));
        break;
      }
    }
  });
}

export function cmdHdlDisposeTreeView() {
  TreeViewManagerInstance.dispose();
}

export async function showError(e: UserError | SystemError) {
  const notificationMessage = e.notificationMessage ?? e.message;

  if (e.stack && e instanceof SystemError) {
    VsCodeLogInstance.error(`code:${e.source}.${e.name}, message: ${e.message}, stack: ${e.stack}`);
  } else {
    VsCodeLogInstance.error(`code:${e.source}.${e.name}, message: ${e.message}`);
  }

  const errorCode = `${e.source}.${e.name}`;
  if (isUserCancelError(e)) {
    return;
  } else if ("helpLink" in e && e.helpLink && typeof e.helpLink != "undefined") {
    const help = {
      title: StringResources.vsc.handlers.getHelp,
      run: async (): Promise<void> => {
        commands.executeCommand("vscode.open", Uri.parse(`${e.helpLink}#${e.source}${e.name}`));
      },
    };

    const button = await window.showErrorMessage(`[${errorCode}]: ${notificationMessage}`, help);
    if (button) await button.run();
  } else if (e instanceof SystemError) {
    const sysError = e as SystemError;
    const path = "https://github.com/OfficeDev/TeamsFx/issues/new?";
    const param = `title=bug+report: ${errorCode}&body=${anonymizeFilePaths(
      e.message
    )}\n\nstack:\n${anonymizeFilePaths(e.stack)}\n\n${
      sysError.userData ? anonymizeFilePaths(sysError.userData) : ""
    }`;
    const issue = {
      title: StringResources.vsc.handlers.reportIssue,
      run: async (): Promise<void> => {
        commands.executeCommand("vscode.open", Uri.parse(`${path}${param}`));
      },
    };

    const button = await window.showErrorMessage(`[${errorCode}]: ${notificationMessage}`, issue);
    if (button) await button.run();
  } else {
    if (!(e instanceof ConcurrentError))
      await window.showErrorMessage(`[${errorCode}]: ${notificationMessage}`);
  }
}

export async function cmpAccountsHandler() {
  const signInAzureOption: VscQuickPickItem = {
    id: "signInAzure",
    label: StringResources.vsc.handlers.signInAzure,
    function: () => signInAzure(),
  };

  const signOutAzureOption: VscQuickPickItem = {
    id: "signOutAzure",
    label: StringResources.vsc.handlers.signOutOfAzure,
    function: async () =>
      Correlator.run(() => {
        signOutAzure(false);
      }),
  };

  const signInM365Option: VscQuickPickItem = {
    id: "signinM365",
    label: StringResources.vsc.handlers.signIn365,
    function: () => signInM365(),
  };

  const signOutM365Option: VscQuickPickItem = {
    id: "signOutM365",
    label: StringResources.vsc.handlers.signOutOfM365,
    function: async () =>
      Correlator.run(() => {
        signOutM365(false);
      }),
  };

  //TODO: hide subscription list until core or api expose the get subscription list API
  // let selectSubscriptionOption: VscQuickPickItem = {
  //   id: "selectSubscription",
  //   label: "Specify an Azure Subscription",
  //   function: () => selectSubscription(),
  //   detail: "4 subscriptions discovered"
  // };

  const quickPick = window.createQuickPick();

  const quickItemOptionArray: VscQuickPickItem[] = [];

  const m365Account = await AppStudioTokenInstance.getStatus();
  if (m365Account.status === "SignedIn") {
    const accountInfo = m365Account.accountInfo;
    const email = (accountInfo as any).upn ? (accountInfo as any).upn : undefined;
    if (email !== undefined) {
      signOutM365Option.label = signOutM365Option.label.concat(email);
    }
    quickItemOptionArray.push(signOutM365Option);
  } else {
    quickItemOptionArray.push(signInM365Option);
  }

  const solutionSettings = await getAzureSolutionSettings();
  // if non-teamsfx project or Azure project then show Azure account info
  if (!solutionSettings || (solutionSettings && "Azure" === solutionSettings.hostType)) {
    const azureAccount = await AzureAccountManager.getStatus();
    if (azureAccount.status === "SignedIn") {
      const accountInfo = azureAccount.accountInfo;
      const email = (accountInfo as any).upn ? (accountInfo as any).upn : undefined;
      if (email !== undefined) {
        signOutAzureOption.label = signOutAzureOption.label.concat(email);
      }
      quickItemOptionArray.push(signOutAzureOption);
      //quickItemOptionArray.push(selectSubscriptionOption);
    } else {
      quickItemOptionArray.push(signInAzureOption);
    }
  }

  quickPick.items = quickItemOptionArray;
  quickPick.onDidChangeSelection((selection) => {
    if (selection[0]) {
      (selection[0] as VscQuickPickItem).function().catch(console.error);
    }
  });
  quickPick.onDidHide(() => quickPick.dispose());
  quickPick.show();
}

export async function decryptSecret(cipher: string, selection: vscode.Range): Promise<void> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.EditSecretStart, {
    [TelemetryProperty.TriggerFrom]: TelemetryTiggerFrom.Other,
  });
  const editor = vscode.window.activeTextEditor;
  if (!editor) {
    return;
  }
  const inputs = getSystemInputs();
  const result = await core.decrypt(cipher, inputs);
  if (result.isOk()) {
    const editedSecret = await VS_CODE_UI.inputText({
      name: "Secret Editor",
      title: StringResources.vsc.handlers.editSecretTitle,
      default: result.value,
    });
    if (editedSecret.isOk() && editedSecret.value.result) {
      const newCiphertext = await core.encrypt(editedSecret.value.result, inputs);
      if (newCiphertext.isOk()) {
        editor.edit((editBuilder) => {
          editBuilder.replace(selection, newCiphertext.value);
        });
        ExtTelemetry.sendTelemetryEvent(TelemetryEvent.EditSecret, {
          [TelemetryProperty.Success]: TelemetrySuccess.Yes,
        });
      } else {
        ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.EditSecret, newCiphertext.error);
      }
    }
  } else {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.EditSecret, result.error);
    window.showErrorMessage(StringResources.vsc.handlers.decryptFailed);
  }
}

export async function openAdaptiveCardExt(args: any[] = [TelemetryTiggerFrom.TreeView]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.PreviewAdaptiveCard, getTriggerFromProperty(args));
  const acExtId = "madewithcardsio.adaptivecardsstudiobeta";
  const extension = vscode.extensions.getExtension(acExtId);
  if (!extension) {
    vscode.window
      .showInformationMessage(
        StringResources.vsc.handlers.installAdaptiveCardExt,
        "Install",
        "Cancel"
      )
      .then(async (selection) => {
        if (selection === "Install") {
          await vscode.commands.executeCommand("workbench.extensions.installExtension", acExtId);
          await vscode.commands.executeCommand("workbench.view.extension.cardLists");
        }
      });
  } else {
    await vscode.commands.executeCommand("workbench.view.extension.cardLists");
  }
}

export async function openPreviewManifest(args: any[]): Promise<Result<any, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.PreviewManifestFile, getTriggerFromProperty(args));

  const workspacePath = getWorkspacePath();
  const validProject = isValidProject(workspacePath);
  if (!validProject) {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.PreviewManifestFile, InvalidProjectError());
    return err(InvalidProjectError());
  }

  let isLocalDebug = false;
  if (args && args.length > 0) {
    const filePath = args[0].fsPath;
    if (filePath && filePath.endsWith("manifest.local.template.json")) {
      isLocalDebug = true;
    }
  }

  let manifestFile;
  if (isLocalDebug) {
    const res = await buildPackageHandler(["localDebug"]);
    if (res.isErr()) {
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.PreviewManifestFile, res.error);
      return err(res.error);
    }
    manifestFile = `${workspacePath}/${BuildFolderName}/${AppPackageFolderName}/manifest.local.json`;
  } else {
    const inputs = getSystemInputs();
    inputs.ignoreEnvInfo = false;
    const env = await core.getSelectedEnv(inputs);
    if (env.isErr()) {
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.PreviewManifestFile, env.error);
      return err(env.error);
    }
    const res = await buildPackageHandler(["remote", env.value]);
    if (res.isErr()) {
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.PreviewManifestFile, res.error);
      return err(res.error);
    }
    manifestFile = `${workspacePath}/${BuildFolderName}/${AppPackageFolderName}/manifest.${env.value}.json`;
  }
  if (fs.existsSync(manifestFile)) {
    workspace.openTextDocument(manifestFile).then((document) => {
      window.showTextDocument(document);
    });
    ExtTelemetry.sendTelemetryEvent(TelemetryEvent.PreviewManifestFile, {
      [TelemetryProperty.Success]: TelemetrySuccess.Yes,
    });
    return ok(manifestFile);
  } else {
    const error = new SystemError(
      "FileNotFound",
      util.format(StringResources.vsc.handlers.fileNotFound, manifestFile),
      ExtensionSource
    );
    showError(error);
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.PreviewManifestFile, error);
    return err(error);
  }
}
export async function openConfigStateFile(args: any[]) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenManifestConfigStateStart);
  const workspacePath = getWorkspacePath();
  if (!workspacePath) {
    const noOpenWorkspaceError = new UserError(
      ExtensionErrors.NoWorkspaceError,
      StringResources.vsc.handlers.noOpenWorkspace,
      ExtensionSource
    );
    showError(noOpenWorkspaceError);
    ExtTelemetry.sendTelemetryErrorEvent(
      TelemetryEvent.OpenManifestConfigState,
      noOpenWorkspaceError
    );
    return err(noOpenWorkspaceError);
  }

  if (!isValidProject(workspacePath)) {
    const invalidProjectError = new UserError(
      ExtensionErrors.InvalidProject,
      StringResources.vsc.handlers.invalidProject,
      ExtensionSource
    );
    showError(invalidProjectError);
    ExtTelemetry.sendTelemetryErrorEvent(
      TelemetryEvent.OpenManifestConfigState,
      invalidProjectError
    );
    return err(invalidProjectError);
  }

  const inputs = getSystemInputs();
  inputs.ignoreEnvInfo = false;
  const envName = await core.getSelectedEnv(inputs);
  if (envName.isErr()) {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.OpenManifestConfigState, envName.error);
    return err(envName.error);
  }

  let sourcePath: string;
  let isConfig = false;
  if (args && args.length > 0 && args[0].type === "config") {
    isConfig = true;
    sourcePath = path.resolve(
      `${workspacePath}/.${ConfigFolderName}/${InputConfigsFolderName}/`,
      EnvConfigFileNameTemplate.replace(EnvNamePlaceholder, envName.value!)
    );
  } else {
    sourcePath = path.resolve(
      `${workspacePath}/.${ConfigFolderName}/${StatesFolderName}/`,
      EnvStateFileNameTemplate.replace(EnvNamePlaceholder, envName.value!)
    );
  }

  if (!(await fs.pathExists(sourcePath))) {
    const noEnvError = new UserError(
      isConfig ? ExtensionErrors.EnvConfigNotFoundError : ExtensionErrors.EnvStateNotFoundError,
      util.format(StringResources.vsc.handlers.findEnvFailed, env),
      ExtensionSource
    );
    showError(noEnvError);
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.OpenManifestConfigState, noEnvError);
    return err(noEnvError);
  }

  workspace.openTextDocument(sourcePath).then((document) => {
    window.showTextDocument(document);
  });
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.OpenManifestConfigState, {
    [TelemetryProperty.Success]: TelemetrySuccess.Yes,
  });
}

export async function updatePreviewManifest(args: any[]) {
  ExtTelemetry.sendTelemetryEvent(
    TelemetryEvent.UpdatePreviewManifestStart,
    getTriggerFromProperty(args && args.length > 1 ? [args[1]] : undefined)
  );
  let env: string | undefined;
  if (args && args.length > 0) {
    const segments = args[0].fsPath.split(".");
    env = segments[segments.length - 2];
  }

  if (env && env !== "local") {
    const inputs = getSystemInputs();
    inputs.env = env;
    await core.activateEnv(inputs);
  }
  const func: Func = {
    namespace: "fx-solution-azure/fx-resource-appstudio",
    method: "updateManifest",
    params: {
      envName: env,
    },
  };

  const result = await runUserTask(
    func,
    TelemetryEvent.UpdatePreviewManifest,
    env && env === "local" ? true : false,
    env
  );

  if (!args || args.length === 0) {
    const workspacePath = getWorkspacePath();
    const inputs = getSystemInputs();
    inputs.ignoreEnvInfo = true;
    const env = await core.getSelectedEnv(inputs);
    if (env.isErr()) {
      ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.UpdatePreviewManifest, env.error);
      return err(env.error);
    }
    const manifestPath = `${workspacePath}/${BuildFolderName}/${AppPackageFolderName}/manifest.${env.value}.json`;
    workspace.openTextDocument(manifestPath).then((document) => {
      window.showTextDocument(document);
    });
  }
  return result;
}

export async function editManifestTemplate(args: any[]) {
  ExtTelemetry.sendTelemetryEvent(
    TelemetryEvent.EditManifestTemplate,
    getTriggerFromProperty(args && args.length > 1 ? [args[1]] : undefined)
  );

  if (args && args.length > 0) {
    const segments = args[0].fsPath.split(".");
    const env = segments[segments.length - 2] === "local" ? "local" : "remote";
    const workspacePath = getWorkspacePath();
    const manifestPath = `${workspacePath}/${TemplateFolderName}/${AppPackageFolderName}/manifest.${env}.template.json`;
    workspace.openTextDocument(manifestPath).then((document) => {
      window.showTextDocument(document);
    });
  }
}

export async function signOutAzure(isFromTreeView: boolean) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.SignOutStart, {
    [TelemetryProperty.TriggerFrom]: isFromTreeView
      ? TelemetryTiggerFrom.TreeView
      : TelemetryTiggerFrom.CommandPalette,
    [TelemetryProperty.AccountType]: AccountType.Azure,
  });
  const result = await AzureAccountManager.signout();
  if (result) {
    await TreeViewManagerInstance.getTreeView("teamsfx-accounts")!.refresh([
      {
        commandId: "fx-extension.signinAzure",
        label: StringContext.getSignInAzureContext(),
        contextValue: "signinAzure",
      },
    ]);
    await TreeViewManagerInstance.getTreeView("teamsfx-accounts")!.remove([
      {
        commandId: "fx-extension.selectSubscription",
        label: "",
        parent: "fx-extension.signinAzure",
      },
    ]);
  }
}

export async function signOutM365(isFromTreeView: boolean) {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.SignOutStart, {
    [TelemetryProperty.TriggerFrom]: isFromTreeView
      ? TelemetryTiggerFrom.TreeView
      : TelemetryTiggerFrom.CommandPalette,
    [TelemetryProperty.AccountType]: AccountType.M365,
  });
  let appstudioLogin: AppStudioTokenProvider = AppStudioTokenInstance;
  const vscodeEnv = detectVsCodeEnv();
  if (vscodeEnv === VsCodeEnv.codespaceBrowser || vscodeEnv === VsCodeEnv.codespaceVsCode) {
    appstudioLogin = AppStudioCodeSpaceTokenInstance;
  }
  const result = await appstudioLogin.signout();
  if (result) {
    await TreeViewManagerInstance.getTreeView("teamsfx-accounts")!.refresh([
      {
        commandId: "fx-extension.signinM365",
        label: StringResources.vsc.handlers.signIn365,
        contextValue: "signinM365",
      },
    ]);
    await TreeViewManagerInstance.getTreeView("teamsfx-accounts")!.remove([
      {
        commandId: "fx-extension.checkSideloading",
        label: "",
        parent: "fx-extension.signinM365",
      },
    ]);
  }

  await envTree.registerEnvTreeHandler();
}

export async function signInAzure() {
  vscode.commands.executeCommand("fx-extension.signinAzure");
}

export async function signInM365() {
  vscode.commands.executeCommand("fx-extension.signinM365");
}

export async function selectSubscription() {
  vscode.commands.executeCommand("fx-extension.specifySubscription");
}

export interface VscQuickPickItem extends QuickPickItem {
  /**
   * Current id of the option item.
   */
  id: string;

  function: () => Promise<void>;
}

export async function migrateTeamsTabAppHandler(): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.MigrateTeamsTabAppStart);
  const selection = await VS_CODE_UI.showMessage(
    "warn",
    StringResources.vsc.migrateTeamsTabApp.warningMessage,
    true,
    StringResources.vsc.migrateTeamsTabApp.upgrade
  );
  const userCancelError = returnUserError(
    new Error(ExtensionErrors.UserCancel),
    StringResources.vsc.common.userCancel,
    ExtensionSource
  );
  if (selection.isErr() || selection.value !== StringResources.vsc.migrateTeamsTabApp.upgrade) {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.MigrateTeamsTabApp, userCancelError);
    return ok(null);
  }
  const selectFolderConfig: SelectFolderConfig = {
    name: StringResources.vsc.migrateTeamsTabApp.selectFolderConfig.name,
    title: StringResources.vsc.migrateTeamsTabApp.selectFolderConfig.title,
  };
  const selectFolderResult = await VS_CODE_UI.selectFolder(selectFolderConfig);
  if (selectFolderResult.isErr() || selectFolderResult.value.type !== "success") {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.MigrateTeamsTabApp, userCancelError);
    return ok(null);
  }
  const tabAppPath = selectFolderResult.value.result as string;

  const progressBar = VS_CODE_UI.createProgressBar(
    StringResources.vsc.migrateTeamsTabApp.progressTitle,
    2
  );
  await progressBar.start();

  const migrationHandler = new TeamsAppMigrationHandler(tabAppPath);
  let result: Result<null, FxError> = ok(null);
  let packageUpdated: Result<boolean, FxError> = ok(true);
  let updateFailedFiles: string[] = [];
  try {
    // Update package.json to use @microsoft/teams-js v2
    await progressBar.next(StringResources.vsc.migrateTeamsTabApp.updatingPackageJson);
    VsCodeLogInstance.info(StringResources.vsc.migrateTeamsTabApp.updatingPackageJson);
    packageUpdated = await migrationHandler.updatePackageJson();
    if (packageUpdated.isErr()) {
      throw packageUpdated.error;
    } else if (!packageUpdated.value) {
      // no change in package.json, show warning.
      const warningMessage = util.format(
        StringResources.vsc.migrateTeamsTabApp.updatePackageJsonWarning,
        path.join(tabAppPath, "package.json")
      );
      VsCodeLogInstance.warning(warningMessage);
      VS_CODE_UI.showMessage("warn", warningMessage, false, "OK");
    } else {
      // Update codes to use @microsoft/teams-js v2
      await progressBar.next(StringResources.vsc.migrateTeamsTabApp.updatingCodes);
      VsCodeLogInstance.info(StringResources.vsc.migrateTeamsTabApp.updatingCodes);
      const failedFiles = await migrationHandler.updateCodes();
      if (failedFiles.isErr()) {
        throw failedFiles.error;
      } else {
        updateFailedFiles = failedFiles.value;
        if (failedFiles.value.length > 0) {
          VsCodeLogInstance.warning(
            util.format(
              StringResources.vsc.migrateTeamsTabApp.updateCodesErrorOutput,
              failedFiles.value.length,
              failedFiles.value.join(", ")
            )
          );
          VS_CODE_UI.showMessage(
            "warn",
            util.format(
              StringResources.vsc.migrateTeamsTabApp.updateCodesErrorMessage,
              failedFiles.value.length,
              failedFiles.value[0]
            ),
            false,
            "OK"
          );
        }
      }
    }
  } catch (error) {
    result = wrapError(error as Error);
  }

  if (result.isErr()) {
    await progressBar.end(false);
    showError(result.error);
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.MigrateTeamsTabApp, result.error);
  } else {
    await progressBar.end(true);
    if (!packageUpdated.isErr() && packageUpdated.value) {
      VS_CODE_UI.showMessage(
        "info",
        util.format(StringResources.vsc.migrateTeamsTabApp.success, tabAppPath),
        false
      );
    }
    ExtTelemetry.sendTelemetryEvent(TelemetryEvent.MigrateTeamsTabApp, {
      [TelemetryProperty.Success]: TelemetrySuccess.Yes,
      [TelemetryProperty.UpdateFailedFiles]: updateFailedFiles.length.toString(),
    });
  }
  return result;
}

export async function migrateTeamsManifestHandler(): Promise<Result<null, FxError>> {
  ExtTelemetry.sendTelemetryEvent(TelemetryEvent.MigrateTeamsManifestStart);
  const selection = await VS_CODE_UI.showMessage(
    "warn",
    StringResources.vsc.migrateTeamsManifest.warningMessage,
    true,
    StringResources.vsc.migrateTeamsManifest.upgrade
  );
  const userCancelError = returnUserError(
    new Error(ExtensionErrors.UserCancel),
    StringResources.vsc.common.userCancel,
    ExtensionSource
  );
  if (selection.isErr() || selection.value !== StringResources.vsc.migrateTeamsManifest.upgrade) {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.MigrateTeamsManifest, userCancelError);
    return ok(null);
  }
  const selectFileConfig: SelectFileConfig = {
    name: StringResources.vsc.migrateTeamsManifest.selectFileConfig.name,
    title: StringResources.vsc.migrateTeamsManifest.selectFileConfig.title,
  };
  const selectFileResult = await VS_CODE_UI.selectFile(selectFileConfig);
  if (selectFileResult.isErr() || selectFileResult.value.type !== "success") {
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.MigrateTeamsManifest, userCancelError);
    return ok(null);
  }
  const manifestPath = selectFileResult.value.result as string;

  const progressBar = VS_CODE_UI.createProgressBar(
    StringResources.vsc.migrateTeamsManifest.progressTitle,
    1
  );
  await progressBar.start();

  const migrationHandler = new TeamsAppMigrationHandler(manifestPath);
  let result: Result<null, FxError> = ok(null);

  try {
    // Update Teams manifest
    await progressBar.next(StringResources.vsc.migrateTeamsManifest.updateManifest);
    VsCodeLogInstance.info(StringResources.vsc.migrateTeamsManifest.updateManifest);
    result = await migrationHandler.updateManifest();
    if (result.isErr()) {
      throw result.error;
    }
  } catch (error) {
    result = wrapError(error as Error);
  }

  if (result.isErr()) {
    await progressBar.end(false);
    showError(result.error);
    ExtTelemetry.sendTelemetryErrorEvent(TelemetryEvent.MigrateTeamsManifest, result.error);
  } else {
    await progressBar.end(true);
    VS_CODE_UI.showMessage(
      "info",
      util.format(StringResources.vsc.migrateTeamsManifest.success, manifestPath),
      false
    );
    ExtTelemetry.sendTelemetryEvent(TelemetryEvent.MigrateTeamsManifest, {
      [TelemetryProperty.Success]: TelemetrySuccess.Yes,
    });
  }
  return result;
}
